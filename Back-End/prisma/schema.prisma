generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pessoa {
  idPessoa       Int        @id @default(autoincrement())
  nomeCompleto   String
  cidade         String
  estado         String
  numCarteirinha String
  Candidato      Candidato?
  Usuario        Usuario?
  CTG            CTG        @relation(fields: [CTGIdCTG], references: [idCTG])
  CTGIdCTG       Int        @unique
}

model Candidato {
  idCandidato                  Int                       @id @default(autoincrement())
  pessoaId                     Int                       @unique
  Pessoa                       Pessoa                    @relation(fields: [pessoaId], references: [idPessoa])
  CPF                          String
  RG                           String
  endereco                     String
  numEndereco                  Int
  bairro                       String
  escolaridade                 String
  filiacao                     String
  ProvaCampeiraEsportiva       ProvaCampeiraEsportiva?
  anexoDocumento               Bytes
  anexoCarteirinha             Bytes
  anexoEscolaridade            Bytes
  anexoResidencia              Bytes
  anexoAtaConcurso             Bytes?
  fichaInscricao               Bytes
  anexoTermoCandidato          Bytes
  anexoRelatorioVivencia       Bytes?
  anexoResponsavel             Bytes?
  anexoProvaEsportivaCampeira  Bytes?
  CTG                          CTG                       @relation(fields: [cTGIdCTG], references: [idCTG])
  cTGIdCTG                     Int
  PreferenciaSorteioDanca      PreferenciaSorteioDanca[]
  Concurso                     Concurso                  @relation(fields: [concursoIdConcurso], references: [idConcurso])
  concursoIdConcurso           Int
  Categoria                    Categoria                 @relation(fields: [categoriaIdCategoria], references: [idCategoria])
  categoriaIdCategoria         Int
  Avalicao                     Avaliacao[]
  SorteioDanca                 SorteioDanca[]
}

enum ProvaCampeiraEsportiva {
  CAMPEIRA
  ESPORTIVA
}

model Usuario {
  idUsuario          Int               @id @default(autoincrement())
  pessoaId           Int               @unique
  Pessoa             Pessoa            @relation(fields: [pessoaId], references: [idPessoa])
  login              String            @unique
  senha              String
  funcao             Funcao
  numCredenciamento  String?
  CTG                CTG               @relation(fields: [cTGIdCTG], references: [idCTG])
  cTGIdCTG           Int
  Concurso           Concurso          @relation(fields: [concursoIdConcurso], references: [idConcurso])
  concursoIdConcurso Int
  Comissao           Comissao          @relation(fields: [comissaoIdComissao], references: [idComissao])
  comissaoIdComissao Int
  ComissaoUsuario    ComissaoUsuario[]
  Avalicao           Avaliacao[]
  Recurso            Recurso[]
  SorteioDanca       SorteioDanca[]
}

enum Funcao {
  SECRETARIO
  AVAVIADOR
  AUXILIAR
}

model CTG {
  idCTG   Int    @id @default(autoincrement())
  nomeCTG String @db.VarChar(100)

  RTid       Int
  RT         RT          @relation(fields: [RTid], references: [idRT])
  candidatos Candidato[]
  Usuario    Usuario[]
  Pessoa     Pessoa[]
  pessoaId   Int?
}

model RT {
  idRT     Int    @id @default(autoincrement())
  nomeRT   String @db.VarChar(100)
  numeroRT Int?
  CTGs     CTG[]
}

model PreferenciaSorteioDanca {
  idPreferecnia         Int           @id @default(autoincrement())
  candidatoId           Int
  Candidato             Candidato     @relation(fields: [candidatoId], references: [idCandidato])
  SorteioDanca          SorteioDanca? @relation(fields: [sorteioDancaIdSorteio], references: [idSorteio])
  sorteioDancaIdSorteio Int?
}

model Concurso {
  idConcurso         Int      @id @default(autoincrement())
  nomeConcurso       String   @db.VarChar(100)
  lancamentoEdital   DateTime
  inscricoesInicio   DateTime
  inscricoesFinal    DateTime
  dataProvaEscrita   DateTime
  dataProvasPraticas DateTime
  dataResultado      DateTime
  local              String   @db.VarChar(255)

  candidatos Candidato[]
  comissoes  Comissao[]
  Usuarios   Usuario[]
}

model Comissao {
  idComissao   Int    @id @default(autoincrement())
  nomeComissao String @db.VarChar(100)

  concurso   Concurso          @relation(fields: [concursoId], references: [idConcurso])
  concursoId Int
  avalicao   Avaliacao[]
  Usuarios   ComissaoUsuario[]
  Usuario    Usuario[]
}

model ComissaoUsuario {
  id         Int      @id @default(autoincrement())
  comissaoId Int
  usuarioId  Int
  Comissao   Comissao @relation(fields: [comissaoId], references: [idComissao])
  Usuario    Usuario  @relation(fields: [usuarioId], references: [idUsuario])
}

model Categoria {
  idCategoria   Int    @id @default(autoincrement())
  nomeCategoria String @db.VarChar(50)
  idadeInicial  Int
  idadeLimite   Int?
  escolaridade  String
  sorteioDanca  Int

  candidatos Candidato[]

  provaTeoricaId Int
  ProvaTeorica   ProvaTeorica @relation(fields: [provaTeoricaId], references: [idprovaTeorica])
  provaPraticaId Int
  ProvaPratica   ProvaPratica @relation(fields: [provaPraticaId], references: [idProvaPratica])
}

model Avaliacao {
  idAvalicao    Int      @id @default(autoincrement())
  dataAvaliacao DateTime @default(now())

  comissaoId Int
  Comissao   Comissao @relation(fields: [comissaoId], references: [idComissao])

  avaliadorId Int
  Usuario     Usuario @relation(fields: [avaliadorId], references: [idUsuario])

  candidatoId Int
  Candidato   Candidato @relation(fields: [candidatoId], references: [idCandidato])
}

model Prova {
  idProva      Int           @id @default(autoincrement())
  nomeProva    String
  tipo         TipoProva
  ProvaPratica ProvaPratica?
  ProvaTeorica ProvaTeorica?
  Recurso      Recurso[]
}

enum TipoProva {
  PRATICA
  TEORICA
}

model ProvaTeorica {
  idprovaTeorica Int    @id @default(autoincrement())
  nome           String
  idProva        Int    @unique
  Prova          Prova  @relation(fields: [idProva], references: [idProva])

  categorias Categoria[]
}

model ProvaPratica {
  idProvaPratica Int    @id @default(autoincrement())
  nome           String
  idProva        Int    @unique
  Prova          Prova  @relation(fields: [idProva], references: [idProva])

  categorias   Categoria[]
  blocosProvas BlocoProva[]
}

model BlocoProva {
  idBloco                    Int           @id @default(autoincrement())
  nomeBloco                  String
  notaMaximaBloco            Float
  ProvaPratica               ProvaPratica? @relation(fields: [provaPraticaIdProvaPratica], references: [idProvaPratica])
  provaPraticaIdProvaPratica Int?
}

model Quesitos {
  idQuesito             Int                   @id @default(autoincrement())
  nomeQuesito           String
  notaMaximaQuesito     Float
  danca                 Boolean
  dancaSalaoTradicional DancaSalaoTradicional

  subeQuesitos SubQuesitos[]
  Recurso      Recurso[]
}

model SubQuesitos {
  idSubequestios  Int    @id @default(autoincrement())
  nomeSubquesito  String
  notaSubequesito Float

  quesitoId Int
  Quesito   Quesitos @relation(fields: [quesitoId], references: [idQuesito])

  subequesitosFilhos SubQuesitos[] @relation("SubQuesitosSub")
  subequesitosPai    SubQuesitos[] @relation("SubQuesitosSub")
}

model Recurso {
  idRecurso     Int      @id @default(autoincrement())
  nomeRecurso   String
  justificativa String
  status        Boolean
  dataRecurso   DateTime @default(now())

  avaliador Int
  Usuario   Usuario @relation(fields: [avaliador], references: [idUsuario])

  quesitoRecurso Int
  Quesito        Quesitos @relation(fields: [quesitoRecurso], references: [idQuesito])
  Prova          Prova?   @relation(fields: [provaIdProva], references: [idProva])
  provaIdProva   Int?
}

enum DancaSalaoTradicional {
  DANCA_DE_SALAO
  DANCA_TRADICIONAL
}

model SorteioDanca {
  idSorteio        Int      @id @default(autoincrement())
  resultadoSorteio Int
  dataSorteio      DateTime @default(now())

  preferenciaSorteioDancaIds PreferenciaSorteioDanca[]

  candidatoId Int
  Candidato   Candidato @relation(fields: [candidatoId], references: [idCandidato])

  UsuarioId Int
  Usuario   Usuario @relation(fields: [UsuarioId], references: [idUsuario])
}

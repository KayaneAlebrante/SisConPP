generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pessoa {
  idPessoa       Int        @id @default(autoincrement())
  nomeCompleto   String
  cidade         String
  estado         String
  numCarteirinha String
  Candidato      Candidato?
  User           User?
  CTG            CTG[]
}

model Candidato {
  idCandidato             Int                       @id @default(autoincrement())
  pessoaId                Int                       @unique
  Pessoa                  Pessoa                    @relation(fields: [pessoaId], references: [idPessoa])
  categoria               Int
  CPF                     String
  RG                      String
  endereco                String
  numEndereco             Int
  bairro                  String
  escolaridade            String
  filiacao                String
  ProvaCampeiraEsportiva  ProvaCampeiraEsportiva?
  anexoDocumento          Bytes
  CTG                     CTG                       @relation(fields: [cTGIdCTG], references: [idCTG])
  cTGIdCTG                Int
  PreferenciaSorteioDanca PreferenciaSorteioDanca[]
  Concurso                Concurso                  @relation(fields: [concursoIdConcurso], references: [idConcurso])
  concursoIdConcurso      Int
  Categoria               Categoria                 @relation(fields: [categoriaIdCategoria], references: [idCategoria])
  categoriaIdCategoria    Int
  Avalicao                Avalicao[]
  SorteioDanca            SorteioDanca[]
}

enum ProvaCampeiraEsportiva {
  CAMPEIRA
  ESPORTIVA
}

model User {
  idUser             Int            @id @default(autoincrement())
  pessoaId           Int            @unique
  Pessoa             Pessoa         @relation(fields: [pessoaId], references: [idPessoa])
  login              String         @unique
  senha              String
  funcao             funcao
  numCredenciamento  String?
  CTG                CTG            @relation(fields: [cTGIdCTG], references: [idCTG])
  cTGIdCTG           Int
  Concurso           Concurso       @relation(fields: [concursoIdConcurso], references: [idConcurso])
  concursoIdConcurso Int
  Comissao           Comissao       @relation(fields: [comissaoIdComissao], references: [idComissao])
  comissaoIdComissao Int
  ComissaoUser       ComissaoUser[]
  Avalicao           Avalicao[]
  Recurso            Recurso[]
  SorteioDanca       SorteioDanca[]
}

enum funcao {
  SECRETARIO
  AVAVIADOR
  AUXILIAR
}

model CTG {
  idCTG   Int    @id @default(autoincrement())
  nomeCTG String @db.VarChar(100)

  RTid       Int
  RT         RT          @relation(fields: [RTid], references: [idRT])
  candidatos Candidato[]
  User       User[]
  Pessoa     Pessoa?     @relation(fields: [pessoaId], references: [idPessoa])
  pessoaId   Int?
}

model RT {
  idRT     Int    @id @default(autoincrement())
  nomeRT   String @db.VarChar(100)
  numeroRT Int?
  CTGs     CTG[]
}

model PreferenciaSorteioDanca {
  idPreferecnia         Int           @id @default(autoincrement())
  candidatoId           Int
  Candidato             Candidato     @relation(fields: [candidatoId], references: [idCandidato])
  SorteioDanca          SorteioDanca? @relation(fields: [sorteioDancaIdSorteio], references: [idSorteio])
  sorteioDancaIdSorteio Int?
}

model Concurso {
  idConcurso         Int      @id @default(autoincrement())
  nomeConcurso       String   @db.VarChar(100)
  lancamentoEdital   DateTime
  inscricoesInicio   DateTime
  inscricoesFinal    DateTime
  dataProvaEscrita   DateTime
  dataProvasPraticas DateTime
  dataResultado      DateTime
  local              String   @db.VarChar(255)

  candidatos Candidato[]
  comissoes  Comissao[]
  users      User[]
}

model Comissao {
  idComissao   Int    @id @default(autoincrement())
  nomeComissao String @db.VarChar(100)

  concurso   Concurso       @relation(fields: [concursoId], references: [idConcurso])
  concursoId Int
  avalicao   Avalicao[]
  users      ComissaoUser[]
  User       User[]
}

model ComissaoUser {
  id         Int      @id @default(autoincrement())
  comissaoId Int
  userId     Int
  Comissao   Comissao @relation(fields: [comissaoId], references: [idComissao])
  User       User     @relation(fields: [userId], references: [idUser])
}

model Categoria {
  idCategoria   Int    @id @default(autoincrement())
  nomeCategoria String @db.VarChar(50)
  idadeInicial  Int
  idadeLimite   Int?
  escolaridade  String
  sorteioDanca  Int

  candidatos Candidato[]

  provaTeoricaId Int
  ProvaTeorica   ProvaTeorica @relation(fields: [provaTeoricaId], references: [idprovaTeorica])
  provaPraticaId Int
  ProvaPratica   ProvaPratica @relation(fields: [provaPraticaId], references: [idProvaPratica])
}

model Avalicao {
  idAvalicao    Int      @id @default(autoincrement())
  dataAvaliacao DateTime @default(now())

  comissaoId Int
  Comissao   Comissao @relation(fields: [comissaoId], references: [idComissao])

  avaliadorId Int
  User        User @relation(fields: [avaliadorId], references: [idUser])

  candidatoId Int
  Candidato   Candidato @relation(fields: [candidatoId], references: [idCandidato])
}

model Prova {
  idProva      Int           @id @default(autoincrement())
  nomeProva    String
  tipo         TipoProva
  ProvaPratica ProvaPratica?
  ProvaTeorica ProvaTeorica?
  Recurso      Recurso[]
}

enum TipoProva {
  PRATICA
  TEORICA
}

model ProvaTeorica {
  idprovaTeorica Int    @id @default(autoincrement())
  nome           String
  idProva        Int    @unique
  Prova          Prova  @relation(fields: [idProva], references: [idProva])

  categorias Categoria[]
}

model ProvaPratica {
  idProvaPratica Int    @id @default(autoincrement())
  nome           String
  idProva        Int    @unique
  Prova          Prova  @relation(fields: [idProva], references: [idProva])

  categorias   Categoria[]
  blocosProvas BlocoProva[]
}

model BlocoProva {
  idBloco                    Int           @id @default(autoincrement())
  nomeBloco                  String
  notaMaximaBloco            Float
  ProvaPratica               ProvaPratica? @relation(fields: [provaPraticaIdProvaPratica], references: [idProvaPratica])
  provaPraticaIdProvaPratica Int?
}

model Quesitos {
  idQuesito             Int                   @id @default(autoincrement())
  nomeQuesito           String
  notaMaximaQuesito     Float
  danca                 Boolean
  dancaSalaoTradicional DancaSalaoTradicional

  subeQuesitos SubQuesitos[]
  Recurso      Recurso[]
}

model SubQuesitos {
  idSubequestios  Int    @id @default(autoincrement())
  nomeSubquesito  String
  notaSubequesito Float

  quesitoId Int
  Quesito   Quesitos @relation(fields: [quesitoId], references: [idQuesito])

  subequesitosFilhos SubQuesitos[] @relation("SubQuesitosSub")
  subequesitosPai    SubQuesitos[] @relation("SubQuesitosSub")
}

model Recurso {
  idRecurso     Int      @id @default(autoincrement())
  nomeRecurso   String
  justificativa String
  status        Boolean
  dataRecurso   DateTime @default(now())

  avaliador Int
  User      User @relation(fields: [avaliador], references: [idUser])

  quesitoRecurso Int
  Quesito        Quesitos @relation(fields: [quesitoRecurso], references: [idQuesito])
  Prova          Prova?   @relation(fields: [provaIdProva], references: [idProva])
  provaIdProva   Int?
}

enum DancaSalaoTradicional {
  DANCA_DE_SALAO
  DANCA_TRADICIONAL
}

model SorteioDanca {
  idSorteio        Int      @id @default(autoincrement())
  resultadoSorteio Int
  dataSorteio      DateTime @default(now())

  preferenciaSorteioDancaIds PreferenciaSorteioDanca[]

  candidatoId Int
  Candidato   Candidato @relation(fields: [candidatoId], references: [idCandidato])

  userId Int
  User   User @relation(fields: [userId], references: [idUser])
}

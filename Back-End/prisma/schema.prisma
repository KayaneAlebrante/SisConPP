generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pessoa {
  idPessoa       Int        @id @default(autoincrement())
  nomeCompleto   String
  cidade         String
  estado         String
  CTG            CTG        @relation(fields: [CTGId], references: [idCTG])
  CTGId          Int        @default(0)
  numCarteirinha String
  Usuario        Usuario?
  Candidato      Candidato?
}

model Candidato {
  idCandidato                 Int                       @id @default(autoincrement())
  pessoaId                    Int                       @unique
  Pessoa                      Pessoa                    @relation(fields: [pessoaId], references: [idPessoa], onDelete: Cascade)
  CPF                         String
  RG                          String
  endereco                    String
  numEndereco                 Int
  bairro                      String
  escolaridade                String
  filiacao                    String
  ProvaCampeiraEsportiva      ProvaCampeiraEsportiva?
  anexoDocumento              Bytes?
  anexoCarteirinha            Bytes?
  anexoEscolaridade           Bytes?
  anexoResidencia             Bytes?
  anexoAtaConcurso            Bytes?
  fichaInscricao              Bytes?
  anexoTermoCandidato         Bytes?
  anexoRelatorioVivencia      Bytes?
  anexoResponsavel            Bytes?
  anexoProvaEsportivaCampeira Bytes?
  PreferenciaSorteioDanca     PreferenciaSorteioDanca[]
  Concurso                    Concurso                  @relation(fields: [concursoId], references: [idConcurso])
  concursoId                  Int
  Categoria                   Categoria                 @relation(fields: [categoriaId], references: [idCategoria])
  categoriaId                 Int
  avalicoes                   Avaliacao[]
  sorteioDanca                SorteioDanca[]
}

enum ProvaCampeiraEsportiva {
  CAMPEIRA
  ESPORTIVA
  NENHUMA
}

model Usuario {
  idUsuario         Int              @id @default(autoincrement())
  pessoaId          Int              @unique
  Pessoa            Pessoa           @relation(fields: [pessoaId], references: [idPessoa], onDelete: Cascade)
  login             String           @unique
  senha             String
  funcao            Funcao
  numCredenciamento String?
  Concurso          Concurso         @relation(fields: [concursoId], references: [idConcurso])
  concursoId        Int
  comissaoUsuarioId Int?
  ComissaoUsuario   ComissaoUsuario? @relation
  avalicoes         Avaliacao[]
  recursos          Recurso[]
  sorteioDanca      SorteioDanca[]
}

enum Funcao {
  SECRETARIO
  AVALIADOR
  AUXILIAR
}

model CTG {
  idCTG   Int    @id @default(autoincrement())
  nomeCTG String @db.VarChar(100)

  RTid   Int
  RT     RT       @relation(fields: [RTid], references: [idRT])
  pessoa Pessoa[]
}

model RT {
  idRT     Int    @id @default(autoincrement())
  nomeRT   String @db.VarChar(100)
  numeroRT Int?
  CTGs     CTG[]
}

model PreferenciaSorteioDanca {
  idPreferecnia  Int           @id @default(autoincrement())
  candidatoId    Int
  Candidato      Candidato     @relation(fields: [candidatoId], references: [idCandidato])
  SorteioDanca   SorteioDanca? @relation(fields: [sorteioDancaId], references: [idSorteio])
  sorteioDancaId Int?
}

model Concurso {
  idConcurso         Int      @id @default(autoincrement())
  nomeConcurso       String   @db.VarChar(100)
  lancamentoEdital   DateTime
  inscricoesInicio   DateTime
  inscricoesFinal    DateTime
  dataProvaEscrita   DateTime
  dataProvasPraticas DateTime
  dataResultado      DateTime
  local              String   @db.VarChar(255)
  anexoEdital        Bytes?

  candidatos Candidato[]
  comissoes  Comissao[]
  usuarios   Usuario[]
}

model Comissao {
  idComissao   Int    @id @default(autoincrement())
  nomeComissao String @db.VarChar(100)

  concurso   Concurso          @relation(fields: [concursoId], references: [idConcurso])
  concursoId Int
  avalicao   Avaliacao[]
  usuarios   ComissaoUsuario[]
}

model ComissaoUsuario {
  idComissaoUsuario Int      @id @default(autoincrement())
  comissaoId        Int
  usuarioId         Int      @unique
  Comissao          Comissao @relation(fields: [comissaoId], references: [idComissao])
  Usuarios          Usuario  @relation(fields: [usuarioId], references: [idUsuario])
}

model Categoria {
  idCategoria   Int    @id @default(autoincrement())
  nomeCategoria String @db.VarChar(50)
  escolaridade  String
  sorteioDanca  Int
  idadeInicial  Int
  idadeLimite   Int?

  provaTeoricaId Int
  ProvaTeorica   ProvaTeorica @relation(fields: [provaTeoricaId], references: [idprovaTeorica])
  provaPraticaId Int
  ProvaPratica   ProvaPratica @relation(fields: [provaPraticaId], references: [idProvaPratica])

  candidatos Candidato[]
}

model Avaliacao {
  idAvalicao    Int      @id @default(autoincrement())
  dataAvaliacao DateTime @default(now())

  comissaoId Int
  Comissao   Comissao @relation(fields: [comissaoId], references: [idComissao])

  avaliadorId Int
  Usuario     Usuario @relation(fields: [avaliadorId], references: [idUsuario])

  candidatoId Int
  Candidato   Candidato @relation(fields: [candidatoId], references: [idCandidato])
}

model ProvaTeorica {
  idprovaTeorica Int    @id @default(autoincrement())
  nome           String

  quesitos   Quesitos[]
  categorias Categoria[]
  recursos   Recurso[]
}

model ProvaPratica {
  idProvaPratica Int    @id @default(autoincrement())
  nome           String

  categorias   Categoria[]
  blocosProvas BlocoProva[]
  recursos     Recurso[]
}

model BlocoProva {
  idBloco         Int          @id @default(autoincrement())
  nomeBloco       String
  notaMaximaBloco Float
  ProvaPratica    ProvaPratica @relation(fields: [provaPraticaId], references: [idProvaPratica])
  provaPraticaId  Int
  quesitos        Quesitos[]
}

model Quesitos {
  idQuesito             Int                   @id @default(autoincrement())
  nomeQuesito           String
  notaMaximaQuesito     Float
  danca                 Boolean
  dancaSalaoTradicional DancaSalaoTradicional

  BlocoProva                 BlocoProva?   @relation(fields: [blocoProvaIdBloco], references: [idBloco])
  blocoProvaIdBloco          Int?
  
  ProvaTeorica               ProvaTeorica? @relation(fields: [provaTeoricaIdprovaTeorica], references: [idprovaTeorica])
  provaTeoricaIdprovaTeorica Int?

  subeQuesitos SubQuesitos[]
  recursos     Recurso[]
}

model SubQuesitos {
  idSubequestios  Int    @id @default(autoincrement())
  nomeSubquesito  String
  notaSubequesito Float

  quesitoId Int
  Quesito   Quesitos @relation(fields: [quesitoId], references: [idQuesito])

  subequesitosFilhos SubQuesitos[] @relation("SubQuesitosSub")
  subequesitosPai    SubQuesitos[] @relation("SubQuesitosSub")
}

model Recurso {
  idRecurso     Int      @id @default(autoincrement())
  nomeRecurso   String
  justificativa String
  status        Boolean
  dataRecurso   DateTime @default(now())

  avaliador Int
  Usuario   Usuario @relation(fields: [avaliador], references: [idUsuario])

  quesitoRecurso             Int
  Quesito                    Quesitos      @relation(fields: [quesitoRecurso], references: [idQuesito])
  ProvaTeorica               ProvaTeorica? @relation(fields: [provaTeoricaIdprovaTeorica], references: [idprovaTeorica])
  provaTeoricaIdprovaTeorica Int?
  ProvaPratica               ProvaPratica? @relation(fields: [provaPraticaIdProvaPratica], references: [idProvaPratica])
  provaPraticaIdProvaPratica Int?
}

enum DancaSalaoTradicional {
  DANCA_DE_SALAO
  DANCA_TRADICIONAL
  NENHUMA
}

model SorteioDanca {
  idSorteio        Int      @id @default(autoincrement())
  resultadoSorteio Int
  dataSorteio      DateTime @default(now())

  preferenciaSorteioDancaIds PreferenciaSorteioDanca[]

  candidatoId Int
  Candidato   Candidato @relation(fields: [candidatoId], references: [idCandidato])

  usuarioId Int
  Usuario   Usuario @relation(fields: [usuarioId], references: [idUsuario])
}

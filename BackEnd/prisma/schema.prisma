generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidato {
  idCandidato                 Int                       @id @default(autoincrement())
  nomeCompleto                String
  cidade                      String
  estado                      String
  CTG                         CTG                       @relation(fields: [CTGId], references: [idCTG])
  CTGId                       Int                       @default(0)
  numCarteirinha              String
  CPF                         String
  RG                          String
  endereco                    String
  numEndereco                 Int
  bairro                      String
  escolaridade                String
  filiacao                    String
  ProvaCampeiraEsportiva      ProvaCampeiraEsportiva?
  anexoDocumento              Bytes?
  anexoCarteirinha            Bytes?
  anexoEscolaridade           Bytes?
  anexoResidencia             Bytes?
  anexoAtaConcurso            Bytes?
  fichaInscricao              Bytes?
  anexoTermoCandidato         Bytes?
  anexoRelatorioVivencia      Bytes?
  anexoResponsavel            Bytes?
  anexoProvaEsportivaCampeira Bytes?
  PreferenciaSorteioDanca     PreferenciaSorteioDanca[]
  Categoria                   Categoria                 @relation(fields: [categoriaId], references: [idCategoria])
  categoriaId                 Int

  participacaoConcursoId ParticipacaoConcurso[]
  avalicoes              Avaliacao[]
  sorteioDanca           SorteioDanca[]
  Recurso                Recurso[]
  Concurso               Concurso?              @relation(fields: [concursoIdConcurso], references: [idConcurso])
  concursoIdConcurso     Int?
}

enum ProvaCampeiraEsportiva {
  CAMPEIRA
  ESPORTIVA
  NENHUMA
}

model Usuario {
  idUsuario         Int            @id @default(autoincrement())
  nomeCompleto      String
  cidade            String
  estado            String
  CTG               CTG            @relation(fields: [CTGId], references: [idCTG])
  CTGId             Int            @default(0)
  numCarteirinha    String
  login             String         @unique
  senha             String
  funcao            Funcao
  numCredenciamento Credenciamento

  comissaoUsuarioId      Int?
  ComissaoUsuario        ComissaoUsuario?       @relation
  participacaoConcursoId ParticipacaoConcurso[]
  avalicoes              Avaliacao[]
  recursos               Recurso[]
  sorteioDanca           SorteioDanca[]
}

enum Funcao {
  SECRETARIO
  AVALIADOR
  AUXILIAR
}

enum Credenciamento {
  CREDENCIADO
  NAO_CREDENCIADO
}

model ParticipacaoConcurso {
  idParticipacaoConcurso Int        @id @default(autoincrement())
  concursoId             Int
  Concurso               Concurso   @relation(fields: [concursoId], references: [idConcurso])
  Usuario                Usuario[]
  Candidato              Candidato? @relation(fields: [candidatoIdCandidato], references: [idCandidato])
  candidatoIdCandidato   Int?
}

model CTG {
  idCTG   Int    @id @default(autoincrement())
  nomeCTG String @db.VarChar(100)

  RTid      Int
  RT        RT          @relation(fields: [RTid], references: [idRT])
  Usuario   Usuario[]
  Candidato Candidato[]
}

model RT {
  idRT     Int    @id @default(autoincrement())
  nomeRT   String @db.VarChar(100)
  numeroRT Int?
  CTGs     CTG[]
}

model PreferenciaSorteioDanca {
  idPreferencia    Int                   @id @default(autoincrement())
  nomeSorteioDanca DancaSalaoTradicional
  candidatoId      Int
  Candidato        Candidato             @relation(fields: [candidatoId], references: [idCandidato])
  SorteioDanca     SorteioDanca?         @relation(fields: [sorteioDancaId], references: [idSorteio])
  sorteioDancaId   Int?
  quesitos         Quesitos[]
}

model Concurso {
  idConcurso         Int      @id @default(autoincrement())
  nomeConcurso       String   @db.VarChar(100)
  lancamentoEdital   DateTime
  inscricoesInicio   DateTime
  inscricoesFinal    DateTime
  dataProvaEscrita   DateTime
  dataProvasPraticas DateTime
  dataResultado      DateTime
  local              String   @db.VarChar(255)
  anexoEdital        Bytes?

  candidatos           Candidato[]
  comissoes            Comissao[]
  ParticipacaoConcurso ParticipacaoConcurso[]
}

model Comissao {
  idComissao   Int    @id @default(autoincrement())
  nomeComissao String @db.VarChar(100)

  concurso   Concurso          @relation(fields: [concursoId], references: [idConcurso])
  concursoId Int
  avalicao   Avaliacao[]
  usuarios   ComissaoUsuario[]
}

model ComissaoUsuario {
  idComissaoUsuario Int      @id @default(autoincrement())
  comissaoId        Int
  usuarioId         Int      @unique
  Comissao          Comissao @relation(fields: [comissaoId], references: [idComissao])
  Usuarios          Usuario  @relation(fields: [usuarioId], references: [idUsuario])
}

model Categoria {
  idCategoria   Int    @id @default(autoincrement())
  nomeCategoria String @db.VarChar(50)
  escolaridade  String
  sorteioDanca  Int
  idadeInicial  Int
  idadeLimite   Int?

  candidatos Candidato[]
  provaId    Int?
  Prova      Prova?      @relation(fields: [provaId], references: [idProva], onDelete: SetNull)

  provaTeoricaId Int?
  ProvaTeorica   ProvaTeorica? @relation(fields: [provaTeoricaId], references: [idprovaTeorica], onDelete: SetNull)

  provaPraticaId Int?
  ProvaPratica   ProvaPratica? @relation(fields: [provaPraticaId], references: [idProvaPratica], onDelete: SetNull)
}

model Avaliacao {
  idAvalicao            Int             @id @default(autoincrement())
  dataAvaliacao         DateTime        @default(now())
  comissaoId            Int
  Comissao              Comissao        @relation(fields: [comissaoId], references: [idComissao])
  avaliadorId           Int
  Usuario               Usuario         @relation(fields: [avaliadorId], references: [idUsuario])
  provaId               Int
  Prova                 Prova?          @relation(fields: [provaId], references: [idProva])
  blocoProvaId          Int?
  BlocoProva            BlocoProva?     @relation(fields: [blocoProvaId], references: [idBloco])
  quesitos              Quesitos[]
  nota                  Float
  candidatoId           Int
  Candidato             Candidato       @relation(fields: [candidatoId], references: [idCandidato])
  FichaCandidato        FichaCandidato? @relation(fields: [fichaCandidatoIdFicha], references: [idFicha])
  fichaCandidatoIdFicha Int?
}

model Prova {
  idProva      Int            @id @default(autoincrement())
  nomeProva    String
  notaMaxima   Float
  categorias   Categoria[]
  ProvaTeorica ProvaTeorica[]
  ProvaPratica ProvaPratica[]
  recursos     Recurso[]
  Avaliacao    Avaliacao[]
}

model ProvaTeorica {
  idprovaTeorica   Int         @id @default(autoincrement())
  provaId          Int?
  Prova            Prova?      @relation(fields: [provaId], references: [idProva])
  gabaritoOficinal Bytes
  numQuestao       Int
  quesitos         Quesitos[]
  Categoria        Categoria[]
  Recurso          Recurso[]
}

model ProvaPratica {
  idProvaPratica Int          @id @default(autoincrement())
  provaId        Int?
  prova          Prova?       @relation(fields: [provaId], references: [idProva])
  blocosProvas   BlocoProva[]
  Categoria      Categoria[]
  Recurso        Recurso[]
}

model BlocoProva {
  idBloco         Int           @id @default(autoincrement())
  nomeBloco       String
  notaMaximaBloco Float
  ProvaPratica    ProvaPratica? @relation(fields: [provaPraticaId], references: [idProvaPratica])
  provaPraticaId  Int?
  quesitos        Quesitos[]
  Avaliacao       Avaliacao[]
}

model Quesitos {
  idQuesito             Int                   @id @default(autoincrement())
  nomeQuesito           String
  notaMaximaQuesito     Float
  danca                 Boolean
  dancaSalaoTradicional DancaSalaoTradicional

  BlocoProva        BlocoProva? @relation(fields: [blocoProvaIdBloco], references: [idBloco])
  blocoProvaIdBloco Int?

  ProvaTeorica               ProvaTeorica? @relation(fields: [provaTeoricaIdprovaTeorica], references: [idprovaTeorica])
  provaTeoricaIdprovaTeorica Int?

  subeQuesitos              SubQuesitos[]
  recursos                  Recurso[]
  PreferenciaSorteioDanca   PreferenciaSorteioDanca? @relation(fields: [preferenciaSorteioDancaId], references: [idPreferencia])
  preferenciaSorteioDancaId Int?
  Avaliacao                 Avaliacao?               @relation(fields: [avaliacaoIdAvalicao], references: [idAvalicao])
  avaliacaoIdAvalicao       Int?
}

model SubQuesitos {
  idSubequestios  Int    @id @default(autoincrement())
  nomeSubquesito  String
  notaSubequesito Float

  quesitoId Int
  Quesito   Quesitos @relation(fields: [quesitoId], references: [idQuesito])

  subequesitosFilhos SubQuesitos[] @relation("SubQuesitosSub")
  subequesitosPai    SubQuesitos[] @relation("SubQuesitosSub")
}

model Recurso {
  idRecurso     Int      @id @default(autoincrement())
  nomeRecurso   String
  justificativa String
  status        Boolean
  dataRecurso   DateTime @default(now())
  arquivos      Bytes

  candidato Int
  Candidato Candidato @relation(fields: [candidato], references: [idCandidato])
  avaliador Int
  Usuario   Usuario   @relation(fields: [avaliador], references: [idUsuario])

  quesitoRecurso             Int
  Quesito                    Quesitos      @relation(fields: [quesitoRecurso], references: [idQuesito])
  ProvaTeorica               ProvaTeorica? @relation(fields: [provaTeoricaIdprovaTeorica], references: [idprovaTeorica])
  provaTeoricaIdprovaTeorica Int?
  ProvaPratica               ProvaPratica? @relation(fields: [provaPraticaIdProvaPratica], references: [idProvaPratica])
  provaPraticaIdProvaPratica Int?
  Prova                      Prova?        @relation(fields: [provaIdProva], references: [idProva])
  provaIdProva               Int?
}

enum DancaSalaoTradicional {
  DANCA_DE_SALAO
  DANCA_TRADICIONAL
  NENHUMA
}

model SorteioDanca {
  idSorteio        Int                   @id @default(autoincrement())
  resultadoSorteio Int
  dataSorteio      DateTime              @default(now())
  tipoDanca        DancaSalaoTradicional

  preferenciaSorteioDancaIds PreferenciaSorteioDanca[]

  candidatoId Int
  Candidato   Candidato @relation(fields: [candidatoId], references: [idCandidato])

  usuarioId Int
  Usuario   Usuario @relation(fields: [usuarioId], references: [idUsuario])
}

model FichaCandidato {
  idFicha       Int         @id @default(autoincrement())
  candidatoId   Int
  notaCandidato Float
  avaliacoes    Avaliacao[]
  provaId       Int
  concursoId    Int
  categoriaId   Int

  anexoTermodeCiencia Bytes
  dataTermo           DateTime @default(now())

  numAcertosProvaTeorica Int
  anexoGabarito          Bytes
  notaRedacao            Float
  anexoRedacao           Bytes
  anexoProvaPratica      Bytes
}
